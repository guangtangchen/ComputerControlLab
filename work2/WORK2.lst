Interrupt Vectors
    00000 940C 0063 JMP	__text_start|__start
    00020 940C 00AB JMP	_timer0_ovf_isr

Program Code (text area)
__text_start|__start:
    00063 EFCF      LDI	R28,0xFF
    00064 E1D0      LDI	R29,0x10
    00065 BFCD      OUT	0x3D,R28
    00066 BFDE      OUT	0x3E,R29
    00067 58C0      SUBI	R28,0x80
    00068 40D0      SBCI	R29,0
    00069 EA0A      LDI	R16,0xAA
    0006A 8308      ST	Y,R16
    0006B 2400      CLR	R0
    0006C E1EA      LDI	R30,0x1A
    0006D E0F1      LDI	R31,1
    0006E E011      LDI	R17,1
    0006F 33E2      CPI	R30,0x32
    00070 07F1      CPC	R31,R17
    00071 F011      BEQ	0x0074
    00072 9201      ST	Z+,R0
    00073 CFFB      RJMP	0x006F
    00074 8300      ST	Z,R16
    00075 EAEC      LDI	R30,0xAC
    00076 E0F0      LDI	R31,0
    00077 E0A0      LDI	R26,0
    00078 E0B1      LDI	R27,1
    00079 E010      LDI	R17,0
    0007A E000      LDI	R16,0
    0007B BF0B      OUT	0x3B,R16
    0007C 3CE6      CPI	R30,0xC6
    0007D 07F1      CPC	R31,R17
    0007E F021      BEQ	0x0083
    0007F 95C8      LPM
    00080 9631      ADIW	R30,1
    00081 920D      ST	X+,R0
    00082 CFF9      RJMP	0x007C
    00083 940E 030E CALL	_main
_exit:
    00085 CFFF      RJMP	_exit
FILE: C:\AVRÊµÑé¿Î¼þ\work2\work2.c
(0001) //ICC-AVR application builder : 2008-5-12 11:35:26
(0002) // Target : M128
(0003) // Crystal: 16.000Mhz
(0004) 
(0005) #include <iom128v.h>
(0006) #include <macros.h>
(0007) #include "work2.h"
(0008) 
(0009) void port_init(void)
(0010) {
(0011)  PORTA = 0x00;
_port_init:
    00086 2422      CLR	R2
    00087 BA2B      OUT	0x1B,R2
(0012)  DDRA  = 0xFF;
    00088 EF8F      LDI	R24,0xFF
    00089 BB8A      OUT	0x1A,R24
(0013)  PORTB = 0x00;
    0008A BA28      OUT	0x18,R2
(0014)  DDRB  = 0x60;
    0008B E680      LDI	R24,0x60
    0008C BB87      OUT	0x17,R24
(0015)  PORTC = 0xF0; //m103 output only
    0008D EF80      LDI	R24,0xF0
    0008E BB85      OUT	0x15,R24
(0016)  DDRC  = 0xF0;
    0008F BB84      OUT	0x14,R24
(0017)  PORTD = 0x0C;
    00090 E08C      LDI	R24,0xC
    00091 BB82      OUT	0x12,R24
(0018)  DDRD  = 0x08;
    00092 E088      LDI	R24,0x8
    00093 BB81      OUT	0x11,R24
(0019)  PORTE = 0xC3;
    00094 EC83      LDI	R24,0xC3
    00095 B983      OUT	0x03,R24
(0020)  DDRE  = 0xF2;
    00096 EF82      LDI	R24,0xF2
    00097 B982      OUT	0x02,R24
(0021)  PORTF = 0x00;
    00098 9220 0062 STS	0x62,R2
(0022)  DDRF  = 0x00;
    0009A 9220 0061 STS	0x61,R2
(0023)  PORTG = 0x00;
    0009C 9220 0065 STS	0x65,R2
(0024)  DDRG  = 0x00;
    0009E 9220 0064 STS	0x64,R2
    000A0 9508      RET
(0025) }
(0026) 
(0027) //TIMER0 initialize - prescale:128
(0028) // WGM: Normal
(0029) // desired value: 1mSec
(0030) // actual value:  1.000mSec (0.0%)
(0031) void timer0_init(void)
(0032) {
(0033)  TCCR0 = 0x00; //stop
_timer0_init:
    000A1 2422      CLR	R2
    000A2 BE23      OUT	0x33,R2
(0034)  ASSR  = 0x00; //set async mode
    000A3 BE20      OUT	0x30,R2
(0035)  TCNT0 = 0x83; //set count
    000A4 E883      LDI	R24,0x83
    000A5 BF82      OUT	0x32,R24
(0036)  OCR0  = 0x7D;
    000A6 E78D      LDI	R24,0x7D
    000A7 BF81      OUT	0x31,R24
(0037)  TCCR0 = 0x05; //start timer
    000A8 E085      LDI	R24,5
    000A9 BF83      OUT	0x33,R24
    000AA 9508      RET
_timer0_ovf_isr:
    000AB 938A      ST	-Y,R24
    000AC 939A      ST	-Y,R25
    000AD B78F      IN	R24,0x3F
    000AE 938A      ST	-Y,R24
(0038) }
(0039) 
(0040) #pragma interrupt_handler timer0_ovf_isr:17
(0041) void timer0_ovf_isr(void)
(0042) {
(0043)  TCNT0 = 0x83; //reload counter value
    000AF E883      LDI	R24,0x83
    000B0 BF82      OUT	0x32,R24
(0044)   	
(0045)  	count0++;
    000B1 9180 0120 LDS	R24,count0
    000B3 9190 0121 LDS	R25,count0+1
    000B5 9601      ADIW	R24,1
    000B6 9390 0121 STS	count0+1,R25
    000B8 9380 0120 STS	count0,R24
(0046) 	count1++;
    000BA 9180 011E LDS	R24,count1
    000BC 9190 011F LDS	R25,count1+1
    000BE 9601      ADIW	R24,1
    000BF 9390 011F STS	count1+1,R25
    000C1 9380 011E STS	count1,R24
(0047) 	mark=1;	
    000C3 E081      LDI	R24,1
    000C4 E090      LDI	R25,0
    000C5 9390 011B STS	mark+1,R25
    000C7 9380 011A STS	mark,R24
    000C9 9189      LD	R24,Y+
    000CA BF8F      OUT	0x3F,R24
    000CB 9199      LD	R25,Y+
    000CC 9189      LD	R24,Y+
    000CD 9518      RETI
(0048) }
(0049) 
(0050) //TIMER1 initialize - prescale:8
(0051) // WGM: 14) PWM fast, TOP=ICRn
(0052) // desired value: 976.4Hz
(0053) // actual value: 976.563Hz (0.0%)
(0054) void timer1_init(void)
(0055) {
(0056)  TCCR1B = 0x00; //stop
_timer1_init:
    000CE 2422      CLR	R2
    000CF BC2E      OUT	0x2E,R2
(0057)  TCNT1H = 0xF8; //setup
    000D0 EF88      LDI	R24,0xF8
    000D1 BD8D      OUT	0x2D,R24
(0058)  TCNT1L = 0x01;
    000D2 E081      LDI	R24,1
    000D3 BD8C      OUT	0x2C,R24
(0059)  OCR1AH = 0x07;
    000D4 E087      LDI	R24,7
    000D5 BD8B      OUT	0x2B,R24
(0060)  OCR1AL = 0xFF;
    000D6 EF8F      LDI	R24,0xFF
    000D7 BD8A      OUT	0x2A,R24
(0061)  OCR1BH = 0x07;
    000D8 E087      LDI	R24,7
    000D9 BD89      OUT	0x29,R24
(0062)  OCR1BL = 0xFF;
    000DA EF8F      LDI	R24,0xFF
    000DB BD88      OUT	0x28,R24
(0063)  OCR1CH = 0x07;
    000DC E087      LDI	R24,7
    000DD 9380 0079 STS	0x79,R24
(0064)  OCR1CL = 0xFF;
    000DF EF8F      LDI	R24,0xFF
    000E0 9380 0078 STS	0x78,R24
(0065)  ICR1H  = 0x07;
    000E2 E087      LDI	R24,7
    000E3 BD87      OUT	0x27,R24
(0066)  ICR1L  = 0xFF;
    000E4 EF8F      LDI	R24,0xFF
    000E5 BD86      OUT	0x26,R24
(0067)  TCCR1A = 0xA2;
    000E6 EA82      LDI	R24,0xA2
    000E7 BD8F      OUT	0x2F,R24
(0068)  TCCR1B = 0x1A; //start Timer
    000E8 E18A      LDI	R24,0x1A
    000E9 BD8E      OUT	0x2E,R24
    000EA 9508      RET
(0069) }
(0070) 
(0071) //TIMER3 initialize - prescale:8
(0072) // WGM: 14) PWM fast, TOP=ICRn
(0073) // desired value: 976.4Hz
(0074) // actual value: 976.563Hz (0.0%)
(0075) void timer3_init(void)
(0076) {
(0077)  TCCR3B = 0x00; //stop
_timer3_init:
    000EB 2422      CLR	R2
    000EC 9220 008A STS	0x8A,R2
(0078)  TCNT3H = 0xF8; //setup
    000EE EF88      LDI	R24,0xF8
    000EF 9380 0089 STS	0x89,R24
(0079)  TCNT3L = 0x01;
    000F1 E081      LDI	R24,1
    000F2 9380 0088 STS	0x88,R24
(0080)  OCR3AH = 0x07;
    000F4 E087      LDI	R24,7
    000F5 9380 0087 STS	0x87,R24
(0081)  OCR3AL = 0xFF;
    000F7 EF8F      LDI	R24,0xFF
    000F8 9380 0086 STS	0x86,R24
(0082)  OCR3BH = 0x07;
    000FA E087      LDI	R24,7
    000FB 9380 0085 STS	0x85,R24
(0083)  OCR3BL = 0xFF;
    000FD EF8F      LDI	R24,0xFF
    000FE 9380 0084 STS	0x84,R24
(0084)  OCR3CH = 0x07;
    00100 E087      LDI	R24,7
    00101 9380 0083 STS	0x83,R24
(0085)  OCR3CL = 0xFF;
    00103 EF8F      LDI	R24,0xFF
    00104 9380 0082 STS	0x82,R24
(0086)  ICR3H  = 0x07;
    00106 E087      LDI	R24,7
    00107 9380 0081 STS	0x81,R24
(0087)  ICR3L  = 0xFF;
    00109 EF8F      LDI	R24,0xFF
    0010A 9380 0080 STS	0x80,R24
(0088)  TCCR3A = 0x2A;
    0010C E28A      LDI	R24,0x2A
    0010D 9380 008B STS	0x8B,R24
(0089)  TCCR3B = 0x1A; //start Timer
    0010F E18A      LDI	R24,0x1A
    00110 9380 008A STS	0x8A,R24
    00112 9508      RET
(0090) }
(0091) 
(0092) //UART0 initialize
(0093) // desired baud rate: 9600
(0094) // actual: baud rate:9615 (0.2%)
(0095) // char size: 8 bit
(0096) // parity: Disabled
(0097) void uart0_init(void)
(0098) {
(0099)  UCSR0B = 0x00; //disable while setting baud rate
_uart0_init:
    00113 2422      CLR	R2
    00114 B82A      OUT	0x0A,R2
(0100)  UCSR0A = 0x00;
    00115 B82B      OUT	0x0B,R2
(0101)  UCSR0C = 0x06;
    00116 E086      LDI	R24,6
    00117 9380 0095 STS	0x95,R24
(0102)  UBRR0L = 0x67; //set baud rate lo
    00119 E687      LDI	R24,0x67
    0011A B989      OUT	0x09,R24
(0103)  UBRR0H = 0x00; //set baud rate hi
    0011B 9220 0090 STS	0x90,R2
(0104)  UCSR0B = 0x18;
    0011D E188      LDI	R24,0x18
    0011E B98A      OUT	0x0A,R24
    0011F 9508      RET
(0105) }
(0106) 
(0107) //UART1 initialize
(0108) // desired baud rate:9600
(0109) // actual baud rate:9615 (0.2%)
(0110) // char size: 8 bit
(0111) // parity: Disabled
(0112) void uart1_init(void)
(0113) {
(0114)  UCSR1B = 0x00; //disable while setting baud rate
_uart1_init:
    00120 2422      CLR	R2
    00121 9220 009A STS	0x9A,R2
(0115)  UCSR1A = 0x00;
    00123 9220 009B STS	0x9B,R2
(0116)  UCSR1C = 0x06;
    00125 E086      LDI	R24,6
    00126 9380 009D STS	0x9D,R24
(0117)  UBRR1L = 0x67; //set baud rate lo
    00128 E687      LDI	R24,0x67
    00129 9380 0099 STS	0x99,R24
(0118)  UBRR1H = 0x00; //set baud rate hi
    0012B 9220 0098 STS	0x98,R2
(0119)  UCSR1B = 0x18;
    0012D E188      LDI	R24,0x18
    0012E 9380 009A STS	0x9A,R24
    00130 9508      RET
(0120) }
(0121) 
(0122) //ADC initialize
(0123) // Conversion time: 104uS
(0124) void adc_init(void)
(0125) {
(0126)  ADCSRA = 0x00; //disable adc
_adc_init:
    00131 2422      CLR	R2
    00132 B826      OUT	0x06,R2
(0127)  ADMUX = 0x40; //select adc input 0
    00133 E480      LDI	R24,0x40
    00134 B987      OUT	0x07,R24
(0128)  ACSR  = 0x80;
    00135 E880      LDI	R24,0x80
    00136 B988      OUT	0x08,R24
(0129)  ADCSRA = 0x87;
    00137 E887      LDI	R24,0x87
    00138 B986      OUT	0x06,R24
    00139 9508      RET
(0130) }
(0131) 
(0132) //call this routine to initialize all peripherals
(0133) void init_devices(void)
(0134) {
(0135)  //stop errant interrupts until set up
(0136)  CLI(); //disable all interrupts
_init_devices:
    0013A 94F8      BCLR	7
(0137)  XDIV  = 0x00; //xtal divider
    0013B 2422      CLR	R2
    0013C BE2C      OUT	0x3C,R2
(0138)  XMCRA = 0x00; //external memory
    0013D 9220 006D STS	0x6D,R2
(0139)  port_init();
    0013F DF46      RCALL	_port_init
(0140)  timer0_init();
    00140 DF60      RCALL	_timer0_init
(0141)  timer1_init();
    00141 DF8C      RCALL	_timer1_init
(0142)  timer3_init();
    00142 DFA8      RCALL	_timer3_init
(0143)  uart0_init();
    00143 DFCF      RCALL	_uart0_init
(0144)  uart1_init();
    00144 DFDB      RCALL	_uart1_init
(0145)  adc_init();
    00145 DFEB      RCALL	_adc_init
(0146) 
(0147)  MCUCR = 0x00;
    00146 2422      CLR	R2
    00147 BE25      OUT	0x35,R2
(0148)  EICRA = 0x00; //extended ext ints
    00148 9220 006A STS	0x6A,R2
(0149)  EICRB = 0x00; //extended ext ints
    0014A BE2A      OUT	0x3A,R2
(0150)  EIMSK = 0x00;
    0014B BE29      OUT	0x39,R2
(0151)  TIMSK = 0x01; //timer interrupt sources
    0014C E081      LDI	R24,1
    0014D BF87      OUT	0x37,R24
(0152)  ETIMSK = 0x00; //extended timer interrupt sources
    0014E 9220 007D STS	0x7D,R2
(0153)  SEI(); //re-enable interrupts
    00150 9478      BSET	7
    00151 9508      RET
(0154)  //all peripherals are now initialized
(0155) }
(0156) 
(0157) void init_paras(void)	  //±äÁ¿³õÊ¼»¯
(0158) {
(0159)     numT=0;
_init_paras:
    00152 2422      CLR	R2
    00153 2433      CLR	R3
    00154 9230 011D STS	numT+1,R3
    00156 9220 011C STS	numT,R2
(0160)     mark=0;
    00158 9230 011B STS	mark+1,R3
    0015A 9220 011A STS	mark,R2
(0161)     count0=0;
    0015C 9230 0121 STS	count0+1,R3
    0015E 9220 0120 STS	count0,R2
(0162) 	count1=0;
    00160 9230 011F STS	count1+1,R3
    00162 9220 011E STS	count1,R2
    00164 9508      RET
_display:
  i                    --> Y,+1
  v                    --> R10
  nn                   --> R20
  value                --> R14
  num                  --> R12
  ii                   --> R22
    00165 940E 0469 CALL	push_xgsetF0FC
    00167 0169      MOVW	R12,R18
    00168 01B8      MOVW	R22,R16
    00169 84EA      LDD	R14,Y+10
    0016A 84FB      LDD	R15,Y+11
(0163) }
(0164) 
(0165) void display(unsigned int ii,unsigned int num,unsigned int value)
(0166) {	
(0167) 	// ii ÏÔÊ¾µÄÎ»Êý
(0168) 	// num²ÉÑù½ÚÅÄÊý
(0169) 	// value²ÉÑùÖµ
(0170) 	char i;
(0171) 	int nn;
(0172) 	int v;
(0173) 	
(0174) 	v=value;
    0016B 0157      MOVW	R10,R14
(0175) 	//(1) dedal with num to less than 16
(0176) 	nn=num;
    0016C 01A6      MOVW	R20,R12
    0016D C002      RJMP	0x0170
(0177) 	while(nn>15)   nn=nn-16;
    0016E 5140      SUBI	R20,0x10
    0016F 4050      SBCI	R21,0
    00170 E08F      LDI	R24,0xF
    00171 E090      LDI	R25,0
    00172 1784      CP	R24,R20
    00173 0795      CPC	R25,R21
    00174 F3CC      BLT	0x016E
(0178) 		
(0179) 	//(2)display
(0180)    	PORTC &=~ 0xF0; 
    00175 B385      IN	R24,0x15
    00176 708F      ANDI	R24,0xF
    00177 BB85      OUT	0x15,R24
(0181) 	PORTA = 0xFF;
    00178 EF8F      LDI	R24,0xFF
    00179 BB8B      OUT	0x1B,R24
(0182) 	switch(ii)
    0017A 3061      CPI	R22,1
    0017B E0E0      LDI	R30,0
    0017C 077E      CPC	R23,R30
    0017D F069      BEQ	0x018B
    0017E 3062      CPI	R22,2
    0017F E0E0      LDI	R30,0
    00180 077E      CPC	R23,R30
    00181 F0C1      BEQ	0x019A
    00182 3063      CPI	R22,3
    00183 E0E0      LDI	R30,0
    00184 077E      CPC	R23,R30
    00185 F0E1      BEQ	0x01A2
    00186 3064      CPI	R22,4
    00187 E0E0      LDI	R30,0
    00188 077E      CPC	R23,R30
    00189 F0D9      BEQ	0x01A5
    0018A C01B      RJMP	0x01A6
(0183) 	{
(0184) 		case 1:	 				 	  //right
(0185) 		{
(0186) 		 	 PORTC |= (1<<W4);
    0018B 9AAF      SBI	0x15,7
(0187) 			 v=v - (v/16)*16; 	 	  //ÊýÖµµÄ¸öÎ»
    0018C E120      LDI	R18,0x10
    0018D E030      LDI	R19,0
    0018E 0185      MOVW	R16,R10
    0018F 940E 0404 CALL	div16s
    00191 E180      LDI	R24,0x10
    00192 E090      LDI	R25,0
    00193 0198      MOVW	R18,R16
    00194 018C      MOVW	R16,R24
    00195 940E 044E CALL	empy16s
    00197 1AA0      SUB	R10,R16
    00198 0AB1      SBC	R11,R17
(0188) 			 break;	
    00199 C00C      RJMP	0x01A6
(0189) 		}
(0190) 		case 2:						  //right middle
(0191) 		{
(0192) 		 	 PORTC |= (1<<W3);
    0019A 9AAE      SBI	0x15,6
(0193) 			 v /= 16;
    0019B E120      LDI	R18,0x10
    0019C E030      LDI	R19,0
    0019D 0185      MOVW	R16,R10
    0019E 940E 0404 CALL	div16s
    001A0 0158      MOVW	R10,R16
(0194) 			 break;	
    001A1 C004      RJMP	0x01A6
(0195) 		}
(0196) 		case 3:PORTC |= (0<<W2);break;	//left middle ,no use this LED 
    001A2 B225      IN	R2,0x15
    001A3 BA25      OUT	0x15,R2
    001A4 C001      RJMP	0x01A6
(0197) 		case 4:PORTC |= (1<<W1);break;	//left
    001A5 9AAC      SBI	0x15,4
(0198) 	}
(0199) 		
(0200) 	// ii=3 --> number of sample
(0201) 	// ii<3 --> real sample data
(0202) 	if(ii<3)		  
    001A6 3063      CPI	R22,3
    001A7 E0E0      LDI	R30,0
    001A8 077E      CPC	R23,R30
    001A9 F440      BCC	0x01B2
(0203) 	{
(0204) 		PORTA = ~g_aDisplayBuf[ v ];
    001AA E082      LDI	R24,2
    001AB E091      LDI	R25,1
    001AC 01F5      MOVW	R30,R10
    001AD 0FE8      ADD	R30,R24
    001AE 1FF9      ADC	R31,R25
    001AF 8020      LD	R2,Z
    001B0 9420      COM	R2
    001B1 BA2B      OUT	0x1B,R2
(0205) 	}
(0206) 	
(0207) 	if(ii==4)
    001B2 3064      CPI	R22,4
    001B3 E0E0      LDI	R30,0
    001B4 077E      CPC	R23,R30
    001B5 F441      BNE	0x01BE
(0208) 		PORTA = ~g_aDisplayBuf[nn];
    001B6 E082      LDI	R24,2
    001B7 E091      LDI	R25,1
    001B8 01FA      MOVW	R30,R20
    001B9 0FE8      ADD	R30,R24
    001BA 1FF9      ADC	R31,R25
    001BB 8020      LD	R2,Z
    001BC 9420      COM	R2
    001BD BA2B      OUT	0x1B,R2
    001BE 940C 045E JMP	pop_xgsetF0FC
_AdToCalCode:
  temp                 --> Y,+0
  indata               --> R10
    001C0 92AA      ST	-Y,R10
    001C1 92BA      ST	-Y,R11
    001C2 0158      MOVW	R10,R16
    001C3 9724      SBIW	R28,4
(0209) }
(0210) 
(0211) float AdToCalCode(unsigned int indata)
(0212) {
(0213)     // change AD code to float 
(0214) 	// indata: 0--1023
(0215) 	// return: -1--+1
(0216)     float temp;
(0217) 	
(0218) 	temp=(float)indata;
    001C4 0185      MOVW	R16,R10
    001C5 940E 0554 CALL	uint2fp
    001C7 8308      ST	Y,R16
    001C8 8319      STD	Y+1,R17
    001C9 832A      STD	Y+2,R18
    001CA 833B      STD	Y+3,R19
(0219) 	
(0220) 	temp=(temp-511.0)/512.0;
    001CB 8028      LD	R2,Y
    001CC 8039      LDD	R3,Y+1
    001CD 804A      LDD	R4,Y+2
    001CE 805B      LDD	R5,Y+3
    001CF EA08      LDI	R16,0xA8
    001D0 E010      LDI	R17,0
    001D1 940E 043A CALL	elpm32
    001D3 933A      ST	-Y,R19
    001D4 932A      ST	-Y,R18
    001D5 931A      ST	-Y,R17
    001D6 930A      ST	-Y,R16
    001D7 0181      MOVW	R16,R2
    001D8 0192      MOVW	R18,R4
    001D9 940E 0517 CALL	fpsub2
    001DB 0118      MOVW	R2,R16
    001DC 0129      MOVW	R4,R18
    001DD EA04      LDI	R16,0xA4
    001DE E010      LDI	R17,0
    001DF 940E 043A CALL	elpm32
    001E1 933A      ST	-Y,R19
    001E2 932A      ST	-Y,R18
    001E3 931A      ST	-Y,R17
    001E4 930A      ST	-Y,R16
    001E5 0181      MOVW	R16,R2
    001E6 0192      MOVW	R18,R4
    001E7 940E 0581 CALL	fpdiv2
    001E9 8308      ST	Y,R16
    001EA 8319      STD	Y+1,R17
    001EB 832A      STD	Y+2,R18
    001EC 833B      STD	Y+3,R19
(0221) 	
(0222) 	return (temp);
    001ED 8108      LD	R16,Y
    001EE 8119      LDD	R17,Y+1
    001EF 812A      LDD	R18,Y+2
    001F0 813B      LDD	R19,Y+3
    001F1 9624      ADIW	R28,4
    001F2 90B9      LD	R11,Y+
    001F3 90A9      LD	R10,Y+
    001F4 9508      RET
_CalToDaCode:
  ii                   --> R10
  temp                 --> Y,+0
  data                 --> Y,+6
    001F5 940E 03FB CALL	push_arg4
    001F7 92AA      ST	-Y,R10
    001F8 92BA      ST	-Y,R11
    001F9 9724      SBIW	R28,4
(0223) }
(0224) 
(0225) unsigned int CalToDaCode(float data)
(0226) {
(0227)     // change  float to DA code 
(0228) 	// data: -1--0--+1
(0229) 	// return: 0--1023--2047
(0230)     float temp;
(0231) 	int   ii;
(0232) 	
(0233) 	temp=(data+1)*1023;
    001FA EA00      LDI	R16,0xA0
    001FB E010      LDI	R17,0
    001FC 940E 043A CALL	elpm32
    001FE 0118      MOVW	R2,R16
    001FF 0129      MOVW	R4,R18
    00200 806E      LDD	R6,Y+6
    00201 807F      LDD	R7,Y+7
    00202 8488      LDD	R8,Y+8
    00203 8499      LDD	R9,Y+9
    00204 E90C      LDI	R16,0x9C
    00205 E010      LDI	R17,0
    00206 940E 043A CALL	elpm32
    00208 933A      ST	-Y,R19
    00209 932A      ST	-Y,R18
    0020A 931A      ST	-Y,R17
    0020B 930A      ST	-Y,R16
    0020C 0183      MOVW	R16,R6
    0020D 0194      MOVW	R18,R8
    0020E 940E 04FF CALL	fpadd2x
    00210 0181      MOVW	R16,R2
    00211 0192      MOVW	R18,R4
    00212 940E 06FB CALL	fpmule2
    00214 8308      ST	Y,R16
    00215 8319      STD	Y+1,R17
    00216 832A      STD	Y+2,R18
    00217 833B      STD	Y+3,R19
(0234) 	
(0235) 	if(temp>2047) temp=2047;
    00218 01CE      MOVW	R24,R28
    00219 E908      LDI	R16,0x98
    0021A E010      LDI	R17,0
    0021B 940E 043A CALL	elpm32
    0021D 939A      ST	-Y,R25
    0021E 938A      ST	-Y,R24
    0021F 940E 0713 CALL	fpcmp1
    00221 F444      BGE	0x022A
    00222 E908      LDI	R16,0x98
    00223 E010      LDI	R17,0
    00224 940E 043A CALL	elpm32
    00226 8308      ST	Y,R16
    00227 8319      STD	Y+1,R17
    00228 832A      STD	Y+2,R18
    00229 833B      STD	Y+3,R19
(0236) 	
(0237) 	ii=(int)temp;
    0022A 8108      LD	R16,Y
    0022B 8119      LDD	R17,Y+1
    0022C 812A      LDD	R18,Y+2
    0022D 813B      LDD	R19,Y+3
    0022E 940E 0522 CALL	fpint
    00230 0158      MOVW	R10,R16
(0238) 	
(0239) 	return (ii);
    00231 9624      ADIW	R28,4
    00232 90B9      LD	R11,Y+
    00233 90A9      LD	R10,Y+
    00234 9624      ADIW	R28,4
    00235 9508      RET
(0240) }
(0241) 
(0242) void uart_Putchar(char c)	// ´Ó´®¿Ú·¢ËÍÊý¾Ý
(0243) {
(0244) 	UDR0=c;
_uart_Putchar:
  c                    --> R16
    00236 B90C      OUT	0x0C,R16
    00237 9508      RET
(0245) }
(0246) unsigned int GetKey(void)
(0247) {	//»ñÈ¡¶àÂ·¿ª¹ØµÄ¼üÖµ
(0248) 	int key;
(0249) 
(0250) 	key=0;
_GetKey:
  key                  --> R16
    00238 2700      CLR	R16
    00239 2711      CLR	R17
(0251) 	if(!(PINB & (1<<K1)))		key |= 0x08;
    0023A 99B4      SBIC	0x16,4
    0023B C001      RJMP	0x023D
    0023C 6008      ORI	R16,0x8
(0252) 	if(!(PINB & (1<<K2)))		key |= 0x04;
    0023D 99B7      SBIC	0x16,7
    0023E C001      RJMP	0x0240
    0023F 6004      ORI	R16,4
(0253) 	if(!(PING & (1<<K3)))		key |= 0x02;
    00240 9020 0063 LDS	R2,0x63
    00242 FC23      SBRC	R2,3
    00243 C001      RJMP	0x0245
    00244 6002      ORI	R16,2
(0254) 	if(!(PING & (1<<K4)))		key |= 0x01;  
    00245 9020 0063 LDS	R2,0x63
    00247 FC24      SBRC	R2,4
    00248 C001      RJMP	0x024A
    00249 6001      ORI	R16,1
    0024A 9508      RET
_controler:
  c_up                 --> Y,+1
  itemp                --> R10
  k                    --> Y,+16
  y                    --> Y,+12
  e                    --> Y,+8
  r                    --> Y,+4
  iout                 --> R10
  u                    --> Y,+0
    0024B 92AA      ST	-Y,R10
    0024C 92BA      ST	-Y,R11
    0024D 9764      SBIW	R28,0x14
(0255) }
(0256) 
(0257) void controler(void)	  // ¿ØÖÆÆ÷¼ÆËã
(0258) {
(0259)     float r=0.5;
    0024E E904      LDI	R16,0x94
    0024F E010      LDI	R17,0
    00250 940E 043A CALL	elpm32
    00252 830C      STD	Y+4,R16
    00253 831D      STD	Y+5,R17
    00254 832E      STD	Y+6,R18
    00255 833F      STD	Y+7,R19
(0260) 	float e;
(0261) 	float y;
(0262) 	float u;
(0263) 	float k=0.2;		  // ±ÈÀý¿ØÖÆÔöÒæ
    00256 E900      LDI	R16,0x90
    00257 E010      LDI	R17,0
    00258 940E 043A CALL	elpm32
    0025A 8B08      STD	Y+16,R16
    0025B 8B19      STD	Y+17,R17
    0025C 8B2A      STD	Y+18,R18
    0025D 8B3B      STD	Y+19,R19
(0264) 	int iout;
(0265) 	char c_up;
(0266) 	int itemp;
(0267) 
(0268) 
(0269) 	// AD ×ª»»
(0270) 	StartADC();
    0025E 9A36      SBI	0x06,6
(0271) 	while(!(ADCSRA & (1<<ADIF)));
    0025F 9B34      SBIS	0x06,4
    00260 CFFE      RJMP	0x025F
(0272) 	
(0273) 	//conversion complete, read value (int) using...
(0274) 	ch[ADChannel] = ADCL;            //Read 8 low bits first (important)
    00261 E28A      LDI	R24,0x2A
    00262 E091      LDI	R25,1
    00263 91E0 0100 LDS	R30,ADChannel
    00265 91F0 0101 LDS	R31,ADChannel+1
    00267 0FEE      LSL	R30
    00268 1FFF      ROL	R31
    00269 0FE8      ADD	R30,R24
    0026A 1FF9      ADC	R31,R25
    0026B B024      IN	R2,0x04
    0026C 2433      CLR	R3
    0026D 8231      STD	Z+1,R3
    0026E 8220      ST	Z,R2
(0275) 	ch[ADChannel] += (int)ADCH << 8; //read 2 high bits and shift into top byte
    0026F 9020 0100 LDS	R2,ADChannel
    00271 9030 0101 LDS	R3,ADChannel+1
    00273 0C22      LSL	R2
    00274 1C33      ROL	R3
    00275 0E28      ADD	R2,R24
    00276 1E39      ADC	R3,R25
    00277 0131      MOVW	R6,R2
    00278 B025      IN	R2,0x05
    00279 2433      CLR	R3
    0027A 2C32      MOV	R3,R2
    0027B 2422      CLR	R2
    0027C 01F3      MOVW	R30,R6
    0027D 8040      LD	R4,Z
    0027E 8051      LDD	R5,Z+1
    0027F 0C42      ADD	R4,R2
    00280 1C53      ADC	R5,R3
    00281 8251      STD	Z+1,R5
    00282 8240      ST	Z,R4
(0276) 			
(0277) 	itemp=ch[ADChannel];
    00283 91E0 0100 LDS	R30,ADChannel
    00285 91F0 0101 LDS	R31,ADChannel+1
    00287 0FEE      LSL	R30
    00288 1FFF      ROL	R31
    00289 0FE8      ADD	R30,R24
    0028A 1FF9      ADC	R31,R25
    0028B 80A0      LD	R10,Z
    0028C 80B1      LDD	R11,Z+1
(0278) 	chdis[ADChannel]=itemp>>2;   // get high 8 to display
    0028D E282      LDI	R24,0x22
    0028E E091      LDI	R25,1
    0028F 91E0 0100 LDS	R30,ADChannel
    00291 91F0 0101 LDS	R31,ADChannel+1
    00293 0FEE      LSL	R30
    00294 1FFF      ROL	R31
    00295 0FE8      ADD	R30,R24
    00296 1FF9      ADC	R31,R25
    00297 0115      MOVW	R2,R10
    00298 9435      ASR	R3
    00299 9427      ROR	R2
    0029A 9435      ASR	R3
    0029B 9427      ROR	R2
    0029C 8231      STD	Z+1,R3
    0029D 8220      ST	Z,R2
(0279) 	
(0280) 	// ÊäÈëÂëÖÆ±ä»»µ½¼ÆËãÂë
(0281) 	y=AdToCalCode(ch[ADChannel]);
    0029E E28A      LDI	R24,0x2A
    0029F E091      LDI	R25,1
    002A0 91E0 0100 LDS	R30,ADChannel
    002A2 91F0 0101 LDS	R31,ADChannel+1
    002A4 0FEE      LSL	R30
    002A5 1FFF      ROL	R31
    002A6 0FE8      ADD	R30,R24
    002A7 1FF9      ADC	R31,R25
    002A8 8100      LD	R16,Z
    002A9 8111      LDD	R17,Z+1
    002AA DF15      RCALL	_AdToCalCode
    002AB 870C      STD	Y+12,R16
    002AC 871D      STD	Y+13,R17
    002AD 872E      STD	Y+14,R18
    002AE 873F      STD	Y+15,R19
(0282) 	
(0283) 	// ¿ØÖÆÆ÷¼ÆËã
(0284) 	e=r-y;
    002AF 810C      LDD	R16,Y+4
    002B0 811D      LDD	R17,Y+5
    002B1 812E      LDD	R18,Y+6
    002B2 813F      LDD	R19,Y+7
    002B3 01CE      MOVW	R24,R28
    002B4 960C      ADIW	R24,0xC
    002B5 939A      ST	-Y,R25
    002B6 938A      ST	-Y,R24
    002B7 940E 050D CALL	fpsub1
    002B9 8708      STD	Y+8,R16
    002BA 8719      STD	Y+9,R17
    002BB 872A      STD	Y+10,R18
    002BC 873B      STD	Y+11,R19
(0285) 	
(0286) 	u=k*e;
    002BD 8908      LDD	R16,Y+16
    002BE 8919      LDD	R17,Y+17
    002BF 892A      LDD	R18,Y+18
    002C0 893B      LDD	R19,Y+19
    002C1 01CE      MOVW	R24,R28
    002C2 9608      ADIW	R24,0x8
    002C3 939A      ST	-Y,R25
    002C4 938A      ST	-Y,R24
    002C5 940E 06F1 CALL	fpmule1
    002C7 8308      ST	Y,R16
    002C8 8319      STD	Y+1,R17
    002C9 832A      STD	Y+2,R18
    002CA 833B      STD	Y+3,R19
(0287) 	
(0288) 	// ÏÞ·ù±£»¤
(0289) 	if(u<-1)  u=-1;
    002CB 8028      LD	R2,Y
    002CC 8039      LDD	R3,Y+1
    002CD 804A      LDD	R4,Y+2
    002CE 805B      LDD	R5,Y+3
    002CF E80C      LDI	R16,0x8C
    002D0 E010      LDI	R17,0
    002D1 940E 043A CALL	elpm32
    002D3 933A      ST	-Y,R19
    002D4 932A      ST	-Y,R18
    002D5 931A      ST	-Y,R17
    002D6 930A      ST	-Y,R16
    002D7 0181      MOVW	R16,R2
    002D8 0192      MOVW	R18,R4
    002D9 940E 071E CALL	fpcmp2
    002DB F444      BGE	0x02E4
    002DC E80C      LDI	R16,0x8C
    002DD E010      LDI	R17,0
    002DE 940E 043A CALL	elpm32
    002E0 8308      ST	Y,R16
    002E1 8319      STD	Y+1,R17
    002E2 832A      STD	Y+2,R18
    002E3 833B      STD	Y+3,R19
(0290) 	if(u>=1)   u=1;
    002E4 8028      LD	R2,Y
    002E5 8039      LDD	R3,Y+1
    002E6 804A      LDD	R4,Y+2
    002E7 805B      LDD	R5,Y+3
    002E8 E90C      LDI	R16,0x9C
    002E9 E010      LDI	R17,0
    002EA 940E 043A CALL	elpm32
    002EC 933A      ST	-Y,R19
    002ED 932A      ST	-Y,R18
    002EE 931A      ST	-Y,R17
    002EF 930A      ST	-Y,R16
    002F0 0181      MOVW	R16,R2
    002F1 0192      MOVW	R18,R4
    002F2 940E 071E CALL	fpcmp2
    002F4 F044      BLT	0x02FD
    002F5 E90C      LDI	R16,0x9C
    002F6 E010      LDI	R17,0
    002F7 940E 043A CALL	elpm32
    002F9 8308      ST	Y,R16
    002FA 8319      STD	Y+1,R17
    002FB 832A      STD	Y+2,R18
    002FC 833B      STD	Y+3,R19
(0291) 	
(0292) 	// ¼ÆËãÂëÖÆ±ä»»µ½Êä³öÂë
(0293) 	iout=CalToDaCode(u);
    002FD 8108      LD	R16,Y
    002FE 8119      LDD	R17,Y+1
    002FF 812A      LDD	R18,Y+2
    00300 813B      LDD	R19,Y+3
    00301 DEF3      RCALL	_CalToDaCode
    00302 0158      MOVW	R10,R16
(0294) 	
(0295) 	// DA Êä³ö
(0296) 	OCR1AH = iout>>8;	//pwmValue[0]>>8;
    00303 0115      MOVW	R2,R10
    00304 2C23      MOV	R2,R3
    00305 2433      CLR	R3
    00306 FC27      SBRC	R2,7
    00307 9430      COM	R3
    00308 BC2B      OUT	0x2B,R2
(0297) 	OCR1AL = iout;		//pwmValue[0];
    00309 BD0A      OUT	0x2A,R16
    0030A 9664      ADIW	R28,0x14
    0030B 90B9      LD	R11,Y+
    0030C 90A9      LD	R10,Y+
    0030D 9508      RET
_main:
  itemp                --> R14
  c_up                 --> R12
  key                  --> R22
  disValue             --> R10
  transMark            --> R20
  pwmValue             --> Y,+2
    0030E 972A      SBIW	R28,0xA
(0298) 	
(0299) }
(0300) 
(0301) void main(void)
(0302) {
(0303)    	int pwmValue[4]={0,0,0,0};
    0030F E182      LDI	R24,0x12
    00310 E091      LDI	R25,1
    00311 01FE      MOVW	R30,R28
    00312 9632      ADIW	R30,2
    00313 E008      LDI	R16,0x8
    00314 E010      LDI	R17,0
    00315 93FA      ST	-Y,R31
    00316 93EA      ST	-Y,R30
    00317 939A      ST	-Y,R25
    00318 938A      ST	-Y,R24
    00319 940E 047D CALL	asgnblk
(0304) 	int disValue=0;
    0031B 24AA      CLR	R10
    0031C 24BB      CLR	R11
(0305) 	int transMark=0;
    0031D 2744      CLR	R20
    0031E 2755      CLR	R21
(0306) 	int key=0;
    0031F 2766      CLR	R22
    00320 2777      CLR	R23
(0307) 	int itemp;
(0308) 	char c_up;
(0309) 
(0310) 	init_devices();
    00321 DE18      RCALL	_init_devices
    00322 C0D5      RJMP	0x03F8
(0311) 
(0312) 	while(1)
(0313) 	{
(0314) 	    // (1) AD
(0315) 	 	ADChannel=0;
    00323 2422      CLR	R2
    00324 2433      CLR	R3
    00325 9230 0101 STS	ADChannel+1,R3
    00327 9220 0100 STS	ADChannel,R2
(0316) 	
(0317) 		// (2)get key value
(0318) 		key=GetKey();
    00329 DF0E      RCALL	_GetKey
    0032A 01B8      MOVW	R22,R16
(0319) 		
(0320) 		// (3)mode choice
(0321) 		// mode except 1 ,DA out 0V
(0322) 		// case 7:  1¡«4Í¨µÀDAÊä³öPWMÕ¼¿Õ±ÈÎª50%µÄ²âÊÔ¡£-> 0V¡£
(0323) 		pwmValue[0] = pwmValue[1] = pwmValue[2] = pwmValue[3] = 1023;
    0032B EF8F      LDI	R24,0xFF
    0032C E093      LDI	R25,3
    0032D 8799      STD	Y+9,R25
    0032E 8788      STD	Y+8,R24
    0032F 839F      STD	Y+7,R25
    00330 838E      STD	Y+6,R24
    00331 839D      STD	Y+5,R25
    00332 838C      STD	Y+4,R24
    00333 839B      STD	Y+3,R25
    00334 838A      STD	Y+2,R24
(0324) 		
(0325) 		// £¨3-1£©¶¨Ê±Æ÷¼ÆËã£¬»ñµÃ²ÉÑùÖÜÆÚ=0.5Ãë
(0326) 		if(mark==1)// ¶¨Ê±Æ÷ÖÐ¶Ïµ½±êÖ¾
    00335 9180 011A LDS	R24,mark
    00337 9190 011B LDS	R25,mark+1
    00339 3081      CPI	R24,1
    0033A E0E0      LDI	R30,0
    0033B 079E      CPC	R25,R30
    0033C F529      BNE	0x0362
(0327) 		{		   
(0328) 			mark=0;
    0033D 2422      CLR	R2
    0033E 2433      CLR	R3
    0033F 9230 011B STS	mark+1,R3
    00341 9220 011A STS	mark,R2
(0329) 			
(0330) 			//display circle
(0331) 			if(count0>4)
    00343 E084      LDI	R24,4
    00344 E090      LDI	R25,0
    00345 9020 0120 LDS	R2,count0
    00347 9030 0121 LDS	R3,count0+1
    00349 1582      CP	R24,R2
    0034A 0593      CPC	R25,R3
    0034B F434      BGE	0x0352
(0332) 			{
(0333) 			    count0=0;
    0034C 2422      CLR	R2
    0034D 2433      CLR	R3
    0034E 9230 0121 STS	count0+1,R3
    00350 9220 0120 STS	count0,R2
(0334) 			}
(0335)   
(0336) 			if(count1>=500)	// 1ºÁÃëµÄÖÐ¶Ï¼ÆÊý500´Î£¬²ÉÑùÒ»´Î		  
    00352 9180 011E LDS	R24,count1
    00354 9190 011F LDS	R25,count1+1
    00356 3F84      CPI	R24,0xF4
    00357 E0E1      LDI	R30,1
    00358 079E      CPC	R25,R30
    00359 F044      BLT	0x0362
(0337) 			{
(0338) 			    count1=0;
    0035A 2422      CLR	R2
    0035B 2433      CLR	R3
    0035C 9230 011F STS	count1+1,R3
    0035E 9220 011E STS	count1,R2
(0339) 				transMark=1;
    00360 E041      LDI	R20,1
    00361 E050      LDI	R21,0
(0340) 			}
(0341)     	}
(0342) 			
(0343) 		//£¨3-2£©Ä£Ì¬Ñ¡Ôñ
(0344) 		if(key==1) // mode 1 ,D(z) and out control
    00362 3061      CPI	R22,1
    00363 E0E0      LDI	R30,0
    00364 077E      CPC	R23,R30
    00365 F009      BEQ	0x0367
    00366 C048      RJMP	0x03AF
(0345) 		{
(0346) 			if(transMark==1)// ²ÉÑùÖÜÆÚµ½±êÖ¾
    00367 3041      CPI	R20,1
    00368 E0E0      LDI	R30,0
    00369 075E      CPC	R21,R30
    0036A F009      BEQ	0x036C
    0036B C057      RJMP	0x03C3
(0347) 			{		   
(0348) 				numT++;
    0036C 9180 011C LDS	R24,numT
    0036E 9190 011D LDS	R25,numT+1
    00370 9601      ADIW	R24,1
    00371 9390 011D STS	numT+1,R25
    00373 9380 011C STS	numT,R24
(0349) 				controler();	// ¿ØÖÆÆ÷¼ÆËã¼°Æä´®¿ÚÊä³ö
    00375 DED5      RCALL	_controler
(0350) 				c_up=(char)chdis[ADChannel];// ´®¿ÚÉÏ´«Êý¾Ý×ª»»
    00376 E282      LDI	R24,0x22
    00377 E091      LDI	R25,1
    00378 91E0 0100 LDS	R30,ADChannel
    0037A 91F0 0101 LDS	R31,ADChannel+1
    0037C 0FEE      LSL	R30
    0037D 1FFF      ROL	R31
    0037E 0FE8      ADD	R30,R24
    0037F 1FF9      ADC	R31,R25
    00380 80C0      LD	R12,Z
    00381 80D1      LDD	R13,Z+1
(0351) 				// ´®¿ÚÉÏ´«Êý¾Ý×ª»»£¨´Ó¸ß8Î»ÕûÐÍ×ª³É×Ö·û´®ÐÍ£©
(0352) 	
(0353) 				if(numT>15) numT=0;
    00382 E08F      LDI	R24,0xF
    00383 E090      LDI	R25,0
    00384 9020 011C LDS	R2,numT
    00386 9030 011D LDS	R3,numT+1
    00388 1582      CP	R24,R2
    00389 0593      CPC	R25,R3
    0038A F434      BGE	0x0391
    0038B 2422      CLR	R2
    0038C 2433      CLR	R3
    0038D 9230 011D STS	numT+1,R3
    0038F 9220 011C STS	numT,R2
(0354) 				
(0355) 		 		disValue = chdis[ADChannel];// high 8, a/d first channel
    00391 E282      LDI	R24,0x22
    00392 E091      LDI	R25,1
    00393 91E0 0100 LDS	R30,ADChannel
    00395 91F0 0101 LDS	R31,ADChannel+1
    00397 0FEE      LSL	R30
    00398 1FFF      ROL	R31
    00399 0FE8      ADD	R30,R24
    0039A 1FF9      ADC	R31,R25
(0356) 				itemp=(numT<<4)+(numT+1);
    0039B 9020 011C LDS	R2,numT
    0039D 9030 011D LDS	R3,numT+1
    0039F 01C1      MOVW	R24,R2
    003A0 9601      ADIW	R24,1
    003A1 0171      MOVW	R14,R2
    003A2 0CEE      LSL	R14
    003A3 1CFF      ROL	R15
    003A4 0CEE      LSL	R14
    003A5 1CFF      ROL	R15
    003A6 0CEE      LSL	R14
    003A7 1CFF      ROL	R15
    003A8 0CEE      LSL	R14
    003A9 1CFF      ROL	R15
    003AA 0EE8      ADD	R14,R24
    003AB 1EF9      ADC	R15,R25
(0357) 				
(0358) 				disValue=itemp;				   //test
    003AC 0157      MOVW	R10,R14
(0359) 				c_up=(char)itemp; 			   // test	
    003AD 2CCE      MOV	R12,R14
(0360) 			}
(0361) 		}
    003AE C014      RJMP	0x03C3
(0362) 		else
(0363) 		{						 // other modes  
(0364) 			pwmValue[0]=1023;	 // DAÊä³öPWMÕ¼¿Õ±ÈÎª50%µÄ²âÊÔ-> 0V¡£
    003AF EF8F      LDI	R24,0xFF
    003B0 E093      LDI	R25,3
    003B1 839B      STD	Y+3,R25
    003B2 838A      STD	Y+2,R24
(0365) 		 	numT=0;
    003B3 2422      CLR	R2
    003B4 2433      CLR	R3
    003B5 9230 011D STS	numT+1,R3
    003B7 9220 011C STS	numT,R2
(0366) 		    OCR1AH = pwmValue[0]>>8;
    003B9 011C      MOVW	R2,R24
    003BA 2C23      MOV	R2,R3
    003BB 2433      CLR	R3
    003BC FC27      SBRC	R2,7
    003BD 9430      COM	R3
    003BE BC2B      OUT	0x2B,R2
(0367) 		    OCR1AL = pwmValue[0];
    003BF BD8A      OUT	0x2A,R24
(0368) 			c_up=0;	 		
    003C0 24CC      CLR	R12
(0369) 			disValue=0;		 
    003C1 24AA      CLR	R10
    003C2 24BB      CLR	R11
(0370) 		}
(0371) 
(0372) 		// (3-3)ÆäËûÍ¨µÀµÄDAÊä³ö
(0373) 		OCR1BH = pwmValue[1]>>8;
    003C3 802C      LDD	R2,Y+4
    003C4 803D      LDD	R3,Y+5
    003C5 2C23      MOV	R2,R3
    003C6 2433      CLR	R3
    003C7 FC27      SBRC	R2,7
    003C8 9430      COM	R3
    003C9 BC29      OUT	0x29,R2
(0374) 		OCR1BL = pwmValue[1];
    003CA 802C      LDD	R2,Y+4
    003CB 803D      LDD	R3,Y+5
    003CC BC28      OUT	0x28,R2
(0375) 		OCR3BH = pwmValue[2]>>8;
    003CD 802E      LDD	R2,Y+6
    003CE 803F      LDD	R3,Y+7
    003CF 2C23      MOV	R2,R3
    003D0 2433      CLR	R3
    003D1 FC27      SBRC	R2,7
    003D2 9430      COM	R3
    003D3 9220 0085 STS	0x85,R2
(0376) 		OCR3BL = pwmValue[2];
    003D5 802E      LDD	R2,Y+6
    003D6 803F      LDD	R3,Y+7
    003D7 9220 0084 STS	0x84,R2
(0377) 		OCR3CH = pwmValue[3]>>8;
    003D9 8428      LDD	R2,Y+8
    003DA 8439      LDD	R3,Y+9
    003DB 2C23      MOV	R2,R3
    003DC 2433      CLR	R3
    003DD FC27      SBRC	R2,7
    003DE 9430      COM	R3
    003DF 9220 0083 STS	0x83,R2
(0378) 		OCR3CL = pwmValue[3];
    003E1 8428      LDD	R2,Y+8
    003E2 8439      LDD	R3,Y+9
    003E3 9220 0082 STS	0x82,R2
(0379) 		
(0380) 		// (4)´®¿Ú·¢ËÍ×´Ì¬£¬ÎÞÂÛºÎÖÖ¹¤×÷Ä£Ì¬¶¼´®¿Ú·¢ËÍ×´Ì¬	
(0381) 		
(0382) 		if(transMark==1)// ²ÉÑùÖÜÆÚµ½±êÖ¾
    003E5 3041      CPI	R20,1
    003E6 E0E0      LDI	R30,0
    003E7 075E      CPC	R21,R30
    003E8 F421      BNE	0x03ED
(0383) 		{
(0384) 		 	transMark=0;
    003E9 2744      CLR	R20
    003EA 2755      CLR	R21
(0385) 		    uart_Putchar(c_up);		
    003EB 2D0C      MOV	R16,R12
    003EC DE49      RCALL	_uart_Putchar
(0386) 		}
(0387) 		// (5)display
(0388) 		display(count0,numT,disValue);		
FILE: <library>
    003ED 82B9      STD	Y+1,R11
    003EE 82A8      ST	Y,R10
    003EF 9120 011C LDS	R18,numT
    003F1 9130 011D LDS	R19,numT+1
    003F3 9100 0120 LDS	R16,count0
    003F5 9110 0121 LDS	R17,count0+1
    003F7 DD6D      RCALL	_display
    003F8 CF2A      RJMP	0x0323
    003F9 962A      ADIW	R28,0xA
    003FA 9508      RET
push_arg4:
    003FB 933A      ST	-Y,R19
    003FC 932A      ST	-Y,R18
push_arg2:
    003FD 931A      ST	-Y,R17
    003FE 930A      ST	-Y,R16
    003FF 9508      RET
mod16s:
    00400 9468      BSET	6
    00401 92DA      ST	-Y,R13
    00402 2ED1      MOV	R13,R17
    00403 C004      RJMP	0x0408
div16s:
    00404 94E8      BCLR	6
    00405 92DA      ST	-Y,R13
    00406 2ED1      MOV	R13,R17
    00407 26D3      EOR	R13,R19
    00408 FF17      SBRS	R17,7
    00409 C004      RJMP	0x040E
    0040A 9510      COM	R17
    0040B 9500      COM	R16
    0040C 5F0F      SUBI	R16,0xFF
    0040D 4F1F      SBCI	R17,0xFF
    0040E FF37      SBRS	R19,7
    0040F C004      RJMP	0x0414
    00410 9530      COM	R19
    00411 9520      COM	R18
    00412 5F2F      SUBI	R18,0xFF
    00413 4F3F      SBCI	R19,0xFF
    00414 940E 0421 CALL	xdiv16u
    00416 FED7      SBRS	R13,7
    00417 C004      RJMP	0x041C
    00418 9510      COM	R17
    00419 9500      COM	R16
    0041A 5F0F      SUBI	R16,0xFF
    0041B 4F1F      SBCI	R17,0xFF
    0041C 90D9      LD	R13,Y+
    0041D 9508      RET
mod16u:
    0041E 9468      BSET	6
    0041F C001      RJMP	xdiv16u
div16u:
    00420 94E8      BCLR	6
xdiv16u:
    00421 92EA      ST	-Y,R14
    00422 92FA      ST	-Y,R15
    00423 938A      ST	-Y,R24
    00424 24EE      CLR	R14
    00425 24FF      CLR	R15
    00426 E180      LDI	R24,0x10
    00427 0F00      LSL	R16
    00428 1F11      ROL	R17
    00429 1CEE      ROL	R14
    0042A 1CFF      ROL	R15
    0042B 16E2      CP	R14,R18
    0042C 06F3      CPC	R15,R19
    0042D F018      BCS	0x0431
    0042E 1AE2      SUB	R14,R18
    0042F 0AF3      SBC	R15,R19
    00430 9503      INC	R16
    00431 958A      DEC	R24
    00432 F7A1      BNE	0x0427
    00433 F416      BRTC	0x0436
    00434 2D0E      MOV	R16,R14
    00435 2D1F      MOV	R17,R15
    00436 9189      LD	R24,Y+
    00437 90F9      LD	R15,Y+
    00438 90E9      LD	R14,Y+
    00439 9508      RET
elpm32:
    0043A 93EA      ST	-Y,R30
    0043B 93FA      ST	-Y,R31
    0043C 920A      ST	-Y,R0
    0043D 2FE0      MOV	R30,R16
    0043E 2FF1      MOV	R31,R17
    0043F 95D8      ELPM
    00440 2D00      MOV	R16,R0
    00441 9631      ADIW	R30,1
    00442 95D8      ELPM
    00443 2D10      MOV	R17,R0
    00444 9631      ADIW	R30,1
    00445 95D8      ELPM
    00446 2D20      MOV	R18,R0
    00447 9631      ADIW	R30,1
    00448 95D8      ELPM
    00449 2D30      MOV	R19,R0
    0044A 9009      LD	R0,Y+
    0044B 91F9      LD	R31,Y+
    0044C 91E9      LD	R30,Y+
    0044D 9508      RET
empy16s:
    0044E 920A      ST	-Y,R0
    0044F 921A      ST	-Y,R1
    00450 938A      ST	-Y,R24
    00451 939A      ST	-Y,R25
    00452 9F02      MUL	R16,R18
    00453 01C0      MOVW	R24,R0
    00454 9F12      MUL	R17,R18
    00455 0D90      ADD	R25,R0
    00456 9F03      MUL	R16,R19
    00457 0D90      ADD	R25,R0
    00458 018C      MOVW	R16,R24
    00459 9199      LD	R25,Y+
    0045A 9189      LD	R24,Y+
    0045B 9019      LD	R1,Y+
    0045C 9009      LD	R0,Y+
    0045D 9508      RET
pop_xgsetF0FC:
    0045E 90A9      LD	R10,Y+
    0045F 90B9      LD	R11,Y+
    00460 90C9      LD	R12,Y+
    00461 90D9      LD	R13,Y+
    00462 90E9      LD	R14,Y+
    00463 90F9      LD	R15,Y+
    00464 9149      LD	R20,Y+
    00465 9159      LD	R21,Y+
    00466 9169      LD	R22,Y+
    00467 9179      LD	R23,Y+
    00468 9508      RET
push_xgsetF0FC:
    00469 937A      ST	-Y,R23
    0046A 936A      ST	-Y,R22
push_xgset30FC:
    0046B 935A      ST	-Y,R21
    0046C 934A      ST	-Y,R20
push_xgset00FC:
    0046D 92FA      ST	-Y,R15
    0046E 92EA      ST	-Y,R14
push_xgset003C:
    0046F 92DA      ST	-Y,R13
    00470 92CA      ST	-Y,R12
    00471 92BA      ST	-Y,R11
    00472 92AA      ST	-Y,R10
    00473 9508      RET
neg32:
    00474 9500      COM	R16
    00475 9510      COM	R17
    00476 9520      COM	R18
    00477 9530      COM	R19
    00478 5F0F      SUBI	R16,0xFF
    00479 4F1F      SBCI	R17,0xFF
    0047A 4F2F      SBCI	R18,0xFF
    0047B 4F3F      SBCI	R19,0xFF
    0047C 9508      RET
asgnblk:
    0047D 93AA      ST	-Y,R26
    0047E 93BA      ST	-Y,R27
    0047F 93EA      ST	-Y,R30
    00480 93FA      ST	-Y,R31
    00481 920A      ST	-Y,R0
    00482 81AF      LDD	R26,Y+7
    00483 85B8      LDD	R27,Y+8
    00484 81ED      LDD	R30,Y+5
    00485 81FE      LDD	R31,Y+6
    00486 3000      CPI	R16,0
    00487 0701      CPC	R16,R17
    00488 F029      BEQ	0x048E
    00489 9001      LD	R0,Z+
    0048A 920D      ST	X+,R0
    0048B 5001      SUBI	R16,1
    0048C 4010      SBCI	R17,0
    0048D CFF8      RJMP	0x0486
    0048E 9009      LD	R0,Y+
    0048F 91F9      LD	R31,Y+
    00490 91E9      LD	R30,Y+
    00491 91B9      LD	R27,Y+
    00492 91A9      LD	R26,Y+
    00493 9624      ADIW	R28,4
    00494 9508      RET
fpsub:
    00495 9468      BSET	6
    00496 C001      RJMP	fpadd_alt
fpadd:
    00497 94E8      BCLR	6
fpadd_alt:
    00498 940E 0680 CALL	saveFPRegs
    0049A 940E 0612 CALL	unpacks
    0049C F409      BNE	0x049E
    0049D C048      RJMP	0x04E6
    0049E 2CE6      MOV	R14,R6
    0049F 2CD5      MOV	R13,R5
    004A0 2CC4      MOV	R12,R4
    004A1 2EB3      MOV	R11,R19
    004A2 2EA2      MOV	R10,R18
    004A3 2E91      MOV	R9,R17
    004A4 2E80      MOV	R8,R16
    004A5 8100      LD	R16,Z
    004A6 8111      LDD	R17,Z+1
    004A7 8122      LDD	R18,Z+2
    004A8 8133      LDD	R19,Z+3
    004A9 940E 0612 CALL	unpacks
    004AB F409      BNE	0x04AD
    004AC C044      RJMP	0x04F1
    004AD 2D84      MOV	R24,R4
    004AE 2D95      MOV	R25,R5
    004AF 198C      SUB	R24,R12
    004B0 099D      SBC	R25,R13
    004B1 F0B9      BEQ	0x04C9
    004B2 F472      BPL	0x04C1
    004B3 9590      COM	R25
    004B4 9580      COM	R24
    004B5 9601      ADIW	R24,1
    004B6 2C4C      MOV	R4,R12
    004B7 2C5D      MOV	R5,R13
    004B8 3188      CPI	R24,0x18
    004B9 F5B8      BCC	0x04F1
    004BA 9535      ASR	R19
    004BB 9527      ROR	R18
    004BC 9517      ROR	R17
    004BD 9507      ROR	R16
    004BE 9701      SBIW	R24,1
    004BF F7D1      BNE	0x04BA
    004C0 C008      RJMP	0x04C9
    004C1 3188      CPI	R24,0x18
    004C2 F518      BCC	0x04E6
    004C3 94B5      ASR	R11
    004C4 94A7      ROR	R10
    004C5 9497      ROR	R9
    004C6 9487      ROR	R8
    004C7 9701      SBIW	R24,1
    004C8 F7D1      BNE	0x04C3
    004C9 2466      CLR	R6
    004CA F02E      BRTS	0x04D0
    004CB 0D08      ADD	R16,R8
    004CC 1D19      ADC	R17,R9
    004CD 1D2A      ADC	R18,R10
    004CE 1D3B      ADC	R19,R11
    004CF C009      RJMP	0x04D9
    004D0 1A80      SUB	R8,R16
    004D1 0A91      SBC	R9,R17
    004D2 0AA2      SBC	R10,R18
    004D3 0AB3      SBC	R11,R19
    004D4 2D08      MOV	R16,R8
    004D5 2D19      MOV	R17,R9
    004D6 2D2A      MOV	R18,R10
    004D7 2D3B      MOV	R19,R11
    004D8 2333      TST	R19
    004D9 F422      BPL	0x04DE
    004DA 940E 0474 CALL	neg32
    004DC E880      LDI	R24,0x80
    004DD 2E68      MOV	R6,R24
    004DE 940E 063B CALL	normalize_and_pack
    004E0 C002      RJMP	0x04E3
    004E1 940E 0670 CALL	pack
    004E3 940E 068F CALL	restoreFPRegs
    004E5 9508      RET
    004E6 8100      LD	R16,Z
    004E7 8111      LDD	R17,Z+1
    004E8 8122      LDD	R18,Z+2
    004E9 8133      LDD	R19,Z+3
    004EA F7C6      BRTC	0x04E3
    004EB 940E 061A CALL	tstR16_R19
    004ED F3A9      BEQ	0x04E3
    004EE E880      LDI	R24,0x80
    004EF 2738      EOR	R19,R24
    004F0 CFF2      RJMP	0x04E3
    004F1 2D08      MOV	R16,R8
    004F2 2D19      MOV	R17,R9
    004F3 2D2A      MOV	R18,R10
    004F4 2D3B      MOV	R19,R11
    004F5 2C4C      MOV	R4,R12
    004F6 2C5D      MOV	R5,R13
    004F7 2C6E      MOV	R6,R14
    004F8 2333      TST	R19
    004F9 F73A      BPL	0x04E1
    004FA 940E 0474 CALL	neg32
    004FC E880      LDI	R24,0x80
    004FD 2E68      MOV	R6,R24
    004FE CFE2      RJMP	0x04E1
fpadd2x:
    004FF 93FA      ST	-Y,R31
    00500 93EA      ST	-Y,R30
    00501 2FEC      MOV	R30,R28
    00502 2FFD      MOV	R31,R29
    00503 9632      ADIW	R30,2
    00504 940E 0497 CALL	fpadd
    00506 91E9      LD	R30,Y+
    00507 91F9      LD	R31,Y+
    00508 833B      STD	Y+3,R19
    00509 832A      STD	Y+2,R18
    0050A 8319      STD	Y+1,R17
    0050B 8308      ST	Y,R16
    0050C 9508      RET
fpsub1:
    0050D 93FA      ST	-Y,R31
    0050E 93EA      ST	-Y,R30
    0050F 81EA      LDD	R30,Y+2
    00510 81FB      LDD	R31,Y+3
    00511 940E 0495 CALL	fpsub
    00513 91E9      LD	R30,Y+
    00514 91F9      LD	R31,Y+
    00515 9622      ADIW	R28,2
    00516 9508      RET
fpsub2:
    00517 93FA      ST	-Y,R31
    00518 93EA      ST	-Y,R30
    00519 2FEC      MOV	R30,R28
    0051A 2FFD      MOV	R31,R29
    0051B 9632      ADIW	R30,2
    0051C 940E 0495 CALL	fpsub
    0051E 91E9      LD	R30,Y+
    0051F 91F9      LD	R31,Y+
    00520 9624      ADIW	R28,4
    00521 9508      RET
fpint:
    00522 924A      ST	-Y,R4
    00523 925A      ST	-Y,R5
    00524 926A      ST	-Y,R6
    00525 938A      ST	-Y,R24
    00526 940E 0622 CALL	unpacku
    00528 F111      BEQ	0x054B
    00529 2055      TST	R5
    0052A F0E2      BMI	0x0547
    0052B E18F      LDI	R24,0x1F
    0052C 1648      CP	R4,R24
    0052D F4C0      BCC	0x0546
    0052E E187      LDI	R24,0x17
    0052F 1648      CP	R4,R24
    00530 F0D1      BEQ	0x054B
    00531 F458      BCC	0x053D
    00532 9441      NEG	R4
    00533 EE89      LDI	R24,0xE9
    00534 1A48      SUB	R4,R24
    00535 C005      RJMP	0x053B
    00536 9535      ASR	R19
    00537 9527      ROR	R18
    00538 9517      ROR	R17
    00539 9507      ROR	R16
    0053A 944A      DEC	R4
    0053B F7D1      BNE	0x0536
    0053C C00E      RJMP	0x054B
    0053D E187      LDI	R24,0x17
    0053E 1A48      SUB	R4,R24
    0053F 0F00      LSL	R16
    00540 1F11      ROL	R17
    00541 1F22      ROL	R18
    00542 1F33      ROL	R19
    00543 944A      DEC	R4
    00544 F7D1      BNE	0x053F
    00545 C005      RJMP	0x054B
    00546 E73F      LDI	R19,0x7F
    00547 2F23      MOV	R18,R19
    00548 2F13      MOV	R17,R19
    00549 2F03      MOV	R16,R19
    0054A C004      RJMP	0x054F
    0054B 2066      TST	R6
    0054C F011      BEQ	0x054F
    0054D 940E 0474 CALL	neg32
    0054F 9189      LD	R24,Y+
    00550 9069      LD	R6,Y+
    00551 9059      LD	R5,Y+
    00552 9049      LD	R4,Y+
    00553 9508      RET
uint2fp:
    00554 9468      BSET	6
    00555 C001      RJMP	0x0557
int2fp:
    00556 94E8      BCLR	6
    00557 2722      CLR	R18
    00558 2733      CLR	R19
    00559 F046      BRTS	0x0562
    0055A FD17      SBRC	R17,7
    0055B 9520      COM	R18
    0055C FD17      SBRC	R17,7
    0055D 9530      COM	R19
    0055E C003      RJMP	0x0562
ulong2fp:
    0055F 9468      BSET	6
    00560 C001      RJMP	0x0562
long2fp:
    00561 94E8      BCLR	6
    00562 924A      ST	-Y,R4
    00563 925A      ST	-Y,R5
    00564 926A      ST	-Y,R6
    00565 938A      ST	-Y,R24
    00566 E187      LDI	R24,0x17
    00567 2E48      MOV	R4,R24
    00568 2455      CLR	R5
    00569 2466      CLR	R6
    0056A F036      BRTS	0x0571
    0056B 2333      TST	R19
    0056C F422      BPL	0x0571
    0056D 940E 0474 CALL	neg32
    0056F E880      LDI	R24,0x80
    00570 2E68      MOV	R6,R24
    00571 940E 063B CALL	normalize_and_pack
    00573 9189      LD	R24,Y+
    00574 9069      LD	R6,Y+
    00575 9059      LD	R5,Y+
    00576 9049      LD	R4,Y+
    00577 9508      RET
fpdiv1:
    00578 93FA      ST	-Y,R31
    00579 93EA      ST	-Y,R30
    0057A 81EA      LDD	R30,Y+2
    0057B 81FB      LDD	R31,Y+3
    0057C D027      RCALL	0x05A4
    0057D 91E9      LD	R30,Y+
    0057E 91F9      LD	R31,Y+
    0057F 9622      ADIW	R28,2
    00580 9508      RET
fpdiv2:
    00581 93FA      ST	-Y,R31
    00582 93EA      ST	-Y,R30
    00583 2FEC      MOV	R30,R28
    00584 2FFD      MOV	R31,R29
    00585 9632      ADIW	R30,2
    00586 D01D      RCALL	0x05A4
    00587 91E9      LD	R30,Y+
    00588 91F9      LD	R31,Y+
    00589 9624      ADIW	R28,4
    0058A 9508      RET
fpdiv1x:
    0058B 93FA      ST	-Y,R31
    0058C 93EA      ST	-Y,R30
    0058D 81EA      LDD	R30,Y+2
    0058E 81FB      LDD	R31,Y+3
    0058F D014      RCALL	0x05A4
    00590 91E9      LD	R30,Y+
    00591 91F9      LD	R31,Y+
    00592 8339      STD	Y+1,R19
    00593 8328      ST	Y,R18
    00594 931A      ST	-Y,R17
    00595 930A      ST	-Y,R16
    00596 9508      RET
fpdiv2x:
    00597 93FA      ST	-Y,R31
    00598 93EA      ST	-Y,R30
    00599 2FEC      MOV	R30,R28
    0059A 2FFD      MOV	R31,R29
    0059B 9632      ADIW	R30,2
    0059C D007      RCALL	0x05A4
    0059D 91E9      LD	R30,Y+
    0059E 91F9      LD	R31,Y+
    0059F 833B      STD	Y+3,R19
    005A0 832A      STD	Y+2,R18
    005A1 8319      STD	Y+1,R17
    005A2 8308      ST	Y,R16
    005A3 9508      RET
    005A4 920A      ST	-Y,R0
    005A5 921A      ST	-Y,R1
    005A6 922A      ST	-Y,R2
    005A7 923A      ST	-Y,R3
    005A8 940E 0680 CALL	saveFPRegs
    005AA 933A      ST	-Y,R19
    005AB 932A      ST	-Y,R18
    005AC 931A      ST	-Y,R17
    005AD 930A      ST	-Y,R16
    005AE 8100      LD	R16,Z
    005AF 8111      LDD	R17,Z+1
    005B0 8122      LDD	R18,Z+2
    005B1 8133      LDD	R19,Z+3
    005B2 940E 0622 CALL	unpacku
    005B4 F409      BNE	0x05B6
    005B5 C057      RJMP	0x060D
    005B6 2CE6      MOV	R14,R6
    005B7 2CD5      MOV	R13,R5
    005B8 2CC4      MOV	R12,R4
    005B9 2EB3      MOV	R11,R19
    005BA 2EA2      MOV	R10,R18
    005BB 2E91      MOV	R9,R17
    005BC 2E80      MOV	R8,R16
    005BD 9109      LD	R16,Y+
    005BE 9119      LD	R17,Y+
    005BF 9129      LD	R18,Y+
    005C0 9139      LD	R19,Y+
    005C1 940E 0622 CALL	unpacku
    005C3 F1A1      BEQ	0x05F8
    005C4 246E      EOR	R6,R14
    005C5 184C      SUB	R4,R12
    005C6 085D      SBC	R5,R13
    005C7 E880      LDI	R24,0x80
    005C8 1648      CP	R4,R24
    005C9 0653      CPC	R5,R19
    005CA F00C      BLT	0x05CC
    005CB C033      RJMP	0x05FF
    005CC E881      LDI	R24,0x81
    005CD 1648      CP	R4,R24
    005CE EF8F      LDI	R24,0xFF
    005CF 0658      CPC	R5,R24
    005D0 F40C      BGE	0x05D2
    005D1 C036      RJMP	0x0608
    005D2 E280      LDI	R24,0x20
    005D3 2433      CLR	R3
    005D4 2E23      MOV	R2,R19
    005D5 2E12      MOV	R1,R18
    005D6 2E01      MOV	R0,R17
    005D7 2F30      MOV	R19,R16
    005D8 2722      CLR	R18
    005D9 2711      CLR	R17
    005DA 2700      CLR	R16
    005DB 9426      LSR	R2
    005DC 9417      ROR	R1
    005DD 9407      ROR	R0
    005DE 9537      ROR	R19
    005DF 9527      ROR	R18
    005E0 0F00      LSL	R16
    005E1 1F11      ROL	R17
    005E2 1F22      ROL	R18
    005E3 1F33      ROL	R19
    005E4 1C00      ROL	R0
    005E5 1C11      ROL	R1
    005E6 1C22      ROL	R2
    005E7 1C33      ROL	R3
    005E8 F028      BCS	0x05EE
    005E9 1808      SUB	R0,R8
    005EA 0819      SBC	R1,R9
    005EB 082A      SBC	R2,R10
    005EC 083B      SBC	R3,R11
    005ED C004      RJMP	0x05F2
    005EE 0C08      ADD	R0,R8
    005EF 1C19      ADC	R1,R9
    005F0 1C2A      ADC	R2,R10
    005F1 1C3B      ADC	R3,R11
    005F2 F00A      BMI	0x05F4
    005F3 6001      ORI	R16,1
    005F4 958A      DEC	R24
    005F5 F751      BNE	0x05E0
    005F6 940E 063B CALL	normalize_and_pack
    005F8 940E 068F CALL	restoreFPRegs
    005FA 9039      LD	R3,Y+
    005FB 9029      LD	R2,Y+
    005FC 9019      LD	R1,Y+
    005FD 9009      LD	R0,Y+
    005FE 9508      RET
    005FF EF0F      LDI	R16,0xFF
    00600 2F10      MOV	R17,R16
    00601 E72F      LDI	R18,0x7F
    00602 E73F      LDI	R19,0x7F
    00603 2066      TST	R6
    00604 F399      BEQ	0x05F8
    00605 940E 0474 CALL	neg32
    00607 CFF0      RJMP	0x05F8
    00608 2700      CLR	R16
    00609 2F10      MOV	R17,R16
    0060A 2F20      MOV	R18,R16
    0060B 2F30      MOV	R19,R16
    0060C CFEB      RJMP	0x05F8
    0060D 9109      LD	R16,Y+
    0060E 9119      LD	R17,Y+
    0060F 9129      LD	R18,Y+
    00610 9139      LD	R19,Y+
    00611 CFED      RJMP	0x05FF
unpacks:
    00612 D00F      RCALL	unpacku
    00613 F029      BEQ	0x0619
    00614 2066      TST	R6
    00615 F011      BEQ	0x0618
    00616 940E 0474 CALL	neg32
    00618 9498      BCLR	1
    00619 9508      RET
tstR16_R19:
    0061A 2300      TST	R16
    0061B F429      BNE	0x0621
    0061C 2311      TST	R17
    0061D F419      BNE	0x0621
    0061E 2322      TST	R18
    0061F F409      BNE	0x0621
    00620 2333      TST	R19
    00621 9508      RET
unpacku:
    00622 DFF7      RCALL	tstR16_R19
    00623 F099      BEQ	0x0637
    00624 938A      ST	-Y,R24
    00625 2E63      MOV	R6,R19
    00626 E880      LDI	R24,0x80
    00627 2268      AND	R6,R24
    00628 0F22      LSL	R18
    00629 1F33      ROL	R19
    0062A 2E43      MOV	R4,R19
    0062B E78F      LDI	R24,0x7F
    0062C 1A48      SUB	R4,R24
    0062D 2455      CLR	R5
    0062E 2788      CLR	R24
    0062F 0A58      SBC	R5,R24
    00630 9526      LSR	R18
    00631 E830      LDI	R19,0x80
    00632 2B23      OR	R18,R19
    00633 2733      CLR	R19
    00634 9189      LD	R24,Y+
    00635 9498      BCLR	1
    00636 9508      RET
    00637 2444      CLR	R4
    00638 2455      CLR	R5
    00639 2466      CLR	R6
    0063A 9508      RET
normalize_and_pack:
    0063B DFDE      RCALL	tstR16_R19
    0063C F409      BNE	0x063E
    0063D 9508      RET
    0063E 93AA      ST	-Y,R26
    0063F 93BA      ST	-Y,R27
    00640 01D2      MOVW	R26,R4
    00641 939A      ST	-Y,R25
    00642 938A      ST	-Y,R24
    00643 E78E      LDI	R24,0x7E
    00644 E090      LDI	R25,0
    00645 2333      TST	R19
    00646 F049      BEQ	0x0650
    00647 9536      LSR	R19
    00648 9527      ROR	R18
    00649 9517      ROR	R17
    0064A 9507      ROR	R16
    0064B 17A8      CP	R26,R24
    0064C 07B9      CPC	R27,R25
    0064D F4CC      BGE	0x0667
    0064E 9611      ADIW	R26,1
    0064F CFF5      RJMP	0x0645
    00650 9580      COM	R24
    00651 9590      COM	R25
    00652 9601      ADIW	R24,1
    00653 2322      TST	R18
    00654 F0BA      BMI	0x066C
    00655 0F00      LSL	R16
    00656 1F11      ROL	R17
    00657 1F22      ROL	R18
    00658 17A8      CP	R26,R24
    00659 07B9      CPC	R27,R25
    0065A F014      BLT	0x065D
    0065B 9711      SBIW	R26,1
    0065C CFF6      RJMP	0x0653
    0065D 2700      CLR	R16
    0065E 2711      CLR	R17
    0065F 2722      CLR	R18
    00660 2733      CLR	R19
    00661 9189      LD	R24,Y+
    00662 9199      LD	R25,Y+
    00663 012D      MOVW	R4,R26
    00664 91B9      LD	R27,Y+
    00665 91A9      LD	R26,Y+
    00666 9508      RET
    00667 2733      CLR	R19
    00668 EF0F      LDI	R16,0xFF
    00669 2F10      MOV	R17,R16
    0066A E72F      LDI	R18,0x7F
    0066B 2F32      MOV	R19,R18
    0066C 9189      LD	R24,Y+
    0066D 9199      LD	R25,Y+
    0066E 012D      MOVW	R4,R26
    0066F C002      RJMP	0x0672
pack:
    00670 93AA      ST	-Y,R26
    00671 93BA      ST	-Y,R27
    00672 DFA7      RCALL	tstR16_R19
    00673 F049      BEQ	0x067D
    00674 01D2      MOVW	R26,R4
    00675 58A1      SUBI	R26,0x81
    00676 4FBF      SBCI	R27,0xFF
    00677 012D      MOVW	R4,R26
    00678 2D34      MOV	R19,R4
    00679 0F22      LSL	R18
    0067A 9536      LSR	R19
    0067B 9527      ROR	R18
    0067C 2936      OR	R19,R6
    0067D 91B9      LD	R27,Y+
    0067E 91A9      LD	R26,Y+
    0067F 9508      RET
saveFPRegs:
    00680 924A      ST	-Y,R4
    00681 925A      ST	-Y,R5
    00682 926A      ST	-Y,R6
    00683 927A      ST	-Y,R7
    00684 928A      ST	-Y,R8
    00685 929A      ST	-Y,R9
    00686 92AA      ST	-Y,R10
    00687 92BA      ST	-Y,R11
    00688 92CA      ST	-Y,R12
    00689 92DA      ST	-Y,R13
    0068A 92EA      ST	-Y,R14
    0068B 92FA      ST	-Y,R15
    0068C 938A      ST	-Y,R24
    0068D 939A      ST	-Y,R25
    0068E 9508      RET
restoreFPRegs:
    0068F 9199      LD	R25,Y+
    00690 9189      LD	R24,Y+
    00691 90F9      LD	R15,Y+
    00692 90E9      LD	R14,Y+
    00693 90D9      LD	R13,Y+
    00694 90C9      LD	R12,Y+
    00695 90B9      LD	R11,Y+
    00696 90A9      LD	R10,Y+
    00697 9099      LD	R9,Y+
    00698 9089      LD	R8,Y+
    00699 9079      LD	R7,Y+
    0069A 9069      LD	R6,Y+
    0069B 9059      LD	R5,Y+
    0069C 9049      LD	R4,Y+
    0069D 9508      RET
fpmule:
    0069E 940E 0680 CALL	saveFPRegs
    006A0 93AA      ST	-Y,R26
    006A1 93BA      ST	-Y,R27
    006A2 940E 0622 CALL	unpacku
    006A4 F1E1      BEQ	0x06E1
    006A5 2CE6      MOV	R14,R6
    006A6 2CD5      MOV	R13,R5
    006A7 2CC4      MOV	R12,R4
    006A8 2EB3      MOV	R11,R19
    006A9 2EA2      MOV	R10,R18
    006AA 2E91      MOV	R9,R17
    006AB 2E80      MOV	R8,R16
    006AC 8100      LD	R16,Z
    006AD 8111      LDD	R17,Z+1
    006AE 8122      LDD	R18,Z+2
    006AF 8133      LDD	R19,Z+3
    006B0 940E 0622 CALL	unpacku
    006B2 F171      BEQ	0x06E1
    006B3 246E      EOR	R6,R14
    006B4 0C4C      ADD	R4,R12
    006B5 1C5D      ADC	R5,R13
    006B6 E880      LDI	R24,0x80
    006B7 1648      CP	R4,R24
    006B8 0653      CPC	R5,R19
    006B9 F564      BGE	0x06E6
    006BA E881      LDI	R24,0x81
    006BB 1648      CP	R4,R24
    006BC EF8F      LDI	R24,0xFF
    006BD 0658      CPC	R5,R24
    006BE F16C      BLT	0x06EC
    006BF 9EA2      MUL	R10,R18
    006C0 2DB1      MOV	R27,R1
    006C1 2DA0      MOV	R26,R0
    006C2 9E91      MUL	R9,R17
    006C3 2D91      MOV	R25,R1
    006C4 2D80      MOV	R24,R0
    006C5 9EA0      MUL	R10,R16
    006C6 0D80      ADD	R24,R0
    006C7 1D91      ADC	R25,R1
    006C8 1FA3      ADC	R26,R19
    006C9 1FB3      ADC	R27,R19
    006CA 9E82      MUL	R8,R18
    006CB 0D80      ADD	R24,R0
    006CC 1D91      ADC	R25,R1
    006CD 1FA3      ADC	R26,R19
    006CE 1FB3      ADC	R27,R19
    006CF 9E92      MUL	R9,R18
    006D0 0D90      ADD	R25,R0
    006D1 1DA1      ADC	R26,R1
    006D2 1FB3      ADC	R27,R19
    006D3 9EA1      MUL	R10,R17
    006D4 0D90      ADD	R25,R0
    006D5 1DA1      ADC	R26,R1
    006D6 1FB3      ADC	R27,R19
    006D7 2F2B      MOV	R18,R27
    006D8 2F1A      MOV	R17,R26
    006D9 2F09      MOV	R16,R25
    006DA 0F88      LSL	R24
    006DB 1F00      ROL	R16
    006DC 1F11      ROL	R17
    006DD 1F22      ROL	R18
    006DE 1F33      ROL	R19
    006DF 940E 063B CALL	normalize_and_pack
    006E1 91B9      LD	R27,Y+
    006E2 91A9      LD	R26,Y+
    006E3 940E 068F CALL	restoreFPRegs
    006E5 9508      RET
    006E6 EF0F      LDI	R16,0xFF
    006E7 2F10      MOV	R17,R16
    006E8 E72F      LDI	R18,0x7F
    006E9 E78F      LDI	R24,0x7F
    006EA 2E48      MOV	R4,R24
    006EB CFF5      RJMP	0x06E1
    006EC 2700      CLR	R16
    006ED 2F10      MOV	R17,R16
    006EE 2F20      MOV	R18,R16
    006EF 2F30      MOV	R19,R16
    006F0 CFF0      RJMP	0x06E1
fpmule1:
    006F1 93FA      ST	-Y,R31
    006F2 93EA      ST	-Y,R30
    006F3 81EA      LDD	R30,Y+2
    006F4 81FB      LDD	R31,Y+3
    006F5 940E 069E CALL	fpmule
    006F7 91E9      LD	R30,Y+
    006F8 91F9      LD	R31,Y+
    006F9 9622      ADIW	R28,2
    006FA 9508      RET
fpmule2:
    006FB 93FA      ST	-Y,R31
    006FC 93EA      ST	-Y,R30
    006FD 2FEC      MOV	R30,R28
    006FE 2FFD      MOV	R31,R29
    006FF 9632      ADIW	R30,2
    00700 940E 069E CALL	fpmule
    00702 91E9      LD	R30,Y+
    00703 91F9      LD	R31,Y+
    00704 9624      ADIW	R28,4
    00705 9508      RET
fpcmp:
    00706 940E 0495 CALL	fpsub
    00708 2333      TST	R19
    00709 F03A      BMI	0x0711
    0070A 940E 061A CALL	tstR16_R19
    0070C F011      BEQ	0x070F
    0070D E001      LDI	R16,1
    0070E 9508      RET
    0070F 2700      CLR	R16
    00710 9508      RET
    00711 EF0F      LDI	R16,0xFF
    00712 9508      RET
fpcmp1:
    00713 93FA      ST	-Y,R31
    00714 93EA      ST	-Y,R30
    00715 81EA      LDD	R30,Y+2
    00716 81FB      LDD	R31,Y+3
    00717 940E 0706 CALL	fpcmp
    00719 91E9      LD	R30,Y+
    0071A 91F9      LD	R31,Y+
    0071B 9622      ADIW	R28,2
    0071C 2300      TST	R16
    0071D 9508      RET
fpcmp2:
    0071E 93FA      ST	-Y,R31
    0071F 93EA      ST	-Y,R30
    00720 2FEC      MOV	R30,R28
    00721 2FFD      MOV	R31,R29
    00722 9632      ADIW	R30,2
    00723 940E 0706 CALL	fpcmp
    00725 91E9      LD	R30,Y+
    00726 91F9      LD	R31,Y+
    00727 9624      ADIW	R28,4
    00728 2300      TST	R16
    00729 9508      RET
